name: Multi-Provider Terraform Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          filters: |
            cloudflare:
              - 'cloudflare/**'
            backblaze:
              - 'backblaze/**'
      - id: set-matrix
        run: |
          PROVIDERS=()
          if [[ "${{ steps.filter.outputs.cloudflare }}" == "true" ]]; then
            PROVIDERS+=("cloudflare")
          fi
          if [[ "${{ steps.filter.outputs.backblaze }}" == "true" ]]; then
            PROVIDERS+=("backblaze")
          fi
          echo "matrix=$(jq -c -n '$ARGS.positional' --args "${PROVIDERS[@]}")" >> $GITHUB_OUTPUT

  terraform:
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        provider: ${{ fromJSON(needs.detect-changes.outputs.matrix) }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.provider }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v1
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          TF_API_TOKEN: op://kubernetes/Terraform API Key/credential

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ steps.op-load-secret.outputs.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        run: terraform plan -input=false
        if: github.event_name == 'pull_request'

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

      - name: Get Terraform Outputs
        id: tf-outputs
        if: ${{ matrix.provider }} == 'backblaze'
        run: |
          echo "APPLICATION_KEY_ID=$(terraform output -raw application_key_id)" >> $GITHUB_OUTPUT
          echo "APPLICATION_KEY=$(terraform output -raw application_key)" >> $GITHUB_OUTPUT

      - name: Install 1Password CLI
        uses: 1Password/install-cli-action@v1

      - name: Debug 1Password Item
        run: |
          op item get "backblaze-cnpg-key" --vault kubernetes --format json
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Update 1Password Item with Application Key
        if: ${{ matrix.provider }} == 'backblaze'
        run: op item edit "backblaze-cnpg-key" --format json --vault kubernetes 'application_key_id=${{ steps.tf-outputs.outputs.APPLICATION_KEY_ID }}' 'application_key=${{ steps.tf-outputs.outputs.APPLICATION_KEY }}' op item edit backblaze-cnpg-key --vault kubernetes --template=updated-backblaze-cnpg-key.json < /dev/null
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
